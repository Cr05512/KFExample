function [x_est,P_est,x_pred,P_pred,z_est,z_pred,S_kinv] = EKF(x_pred,P_pred,z,sigmaQ,sigmaR,k)

    
    C = jacobianMeasModel(x_pred);
    z_pred = NLMeasurementModel1D(x_pred);
    S_k = C_k*P_pred*P_pred' + sigmaR;
    S_kinv = inv(S_k);

    K_k = P_pred*C_k*S_kinv;
    
    epsilon = z - z_pred;  %Innovation
    x_est = x_pred + K_k*epsilon; %State update
    P_est = P_pred - K_k*S_k*K_k'; %error Covariance update
    
    z_est = NLMeasurementModel1D(x_est); %Estimated measurement

    
    X_est = computeSigmaPoints(x_est,P_est,lambda);
    
    X_pred = cell2mat(arrayfun(@(i) NLMotionModel1D(X_est(:,i),k), 1:size(X_est,2),'UniformOutput',false));
    
    [x_pred,Px] = computeMomentsSigmaPoints(w,X_pred);
    P_pred = Px + sigmaQ;
    
%   Vecchio Filtro
%     [xk_pred,Ak,Qd] = discretizedProcessModel(k,xk_est);
%     Ck = linearizedMeasurementModel(xk_pred);
%     Pk_pred = Ak*Pk_est*Ak' + Qd;
%     K = Pk_pred*Ck'*inv(Ck*Pk_pred*Ck' + Rd);
%     Pk_est = (eye(7)-K*Ck)*Pk_pred;
%     yk_pred = measurementModel(xk_pred);
%     xk_est_next = xk_pred + K*(yk-yk_pred);
end

